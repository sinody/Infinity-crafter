import json
import os.path
import time
from asyncio import WindowsSelectorEventLoopPolicy
import asyncio
from logging import log, debug, info, basicConfig, DEBUG, INFO, WARNING, CRITICAL, ERROR
import emoji
from g4f.client import Client
from g4f.client.stubs import ChatCompletion
from g4f.Provider import Chatai, Blackbox

client = Client(provider=Blackbox)

asyncio.set_event_loop_policy(WindowsSelectorEventLoopPolicy())  # –ö–∞–∫–∞—è-—Ç–æ —à—Ç—É–∫–∞ —á—Ç–æ–±—ã —Ä–∞–Ω—Ç–∞–π–º–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –±—ã–ª–æ


def get_msg(msg, model="gpt-4", system_msg="", max_tokens=1024, temperature=0.7):
    started = time.time()

    response = client.chat.completions.create([
        {
            "role": "system",
            "content": system_msg
        },
        {
            "role": "user",
            "content": msg
        }
    ], model=model, web_search=False, max_tokens=max_tokens)
    print(f"Post elapsed time: {time.time() - started}")

    return response


def parse_msg(msg: ChatCompletion, model):
    message = msg.choices[-1].message.content
    return [message.strip()]


def reaction(terms: list, model):
    while True:
        started = time.time()

        msg = client.chat.completions.create([

            {
                "role": "user",
                "content": f"–°–ö–†–ï–°–¢–ò–¢–¨: {terms[0]} + {terms[1]}. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–≠–º–æ–¥–∑–∏(–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ)][–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞]. –ù–ï –°–ö–õ–ê–î–´–í–ê–ô –≠–ú–û–î–ó–ò, –ê –°–ö–†–ï–©–ò–í–ê–ô. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –æ–ø–∏—Å–∞–Ω–∏–π –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å + –∏–ª–∏ =. –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º —Å–ª–æ–≤, –Ω–æ –¥–æ–ª–∂–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–∑ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è –∏ –±—ã—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º."
            }
        ], model=model, web_search=False, max_tokens=64)
        print(f"Post elapsed time: {time.time() - started}")
        msg = parse_msg(msg, model)

        if "+" in msg[-1] or "=" in msg[-1]:
            continue
        msg[-1].replace("–û—Ç–≤–µ—Ç:", "")
        return msg[-1].strip()
        # print("think:", message[0].strip())


basicConfig(level=ERROR)

all_elements = {"üíß–í–æ–¥–∞", "üî•–û–≥–æ–Ω—å", "üí®–í–µ—Ç–µ—Ä", "‚õ∞–ó–µ–º–ª—è"}
selected = []
generated_reactions = {}
inp = ''

if os.path.exists("save.json"):
    with open("save.json", 'r') as f:
        raw_data: dict = json.load(f)
        for key, i in raw_data["generated_reactions"].items():
            generated_reactions[tuple(key.split())] = i
        all_elements = raw_data["all_elements"]


while True:
    if inp in ['ex', 'exit', "–≤—ã—Ö", "–≤—ã—Ö–æ–¥"]:
        exit(0)
    elif inp in ["s", 'save', 'sav', "—Å", "—Å–æ—Ö—Ä–∞–Ω", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"]:
        with open("save.json", 'w') as f:
            _generated_reactions = {}
            for key, i in generated_reactions.items():
                _generated_reactions[" ".join(key)] = i
            json.dump({
                "generated_reactions": _generated_reactions,
                "all_elements": list(all_elements)
            }, f, indent=4)
    if inp.isnumeric():
        num = int(inp)
        if num < len(all_elements):
            selected.append(list(all_elements)[num])
    elif inp in ["<", "redo", "prev"]:
        selected.pop(-1)

    for num, i in enumerate(all_elements):
        print(num, i)

    if selected:
        print("–í—ã–±—Ä–∞–Ω–æ: " + ", ".join(selected) + '.')
        if len(selected) > 1:
            print("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é...")
            if tuple(selected) not in list(generated_reactions.keys()):
                reaction_result = reaction(selected, model="gpt-4o-mini")
            else:
                reaction_result = generated_reactions[tuple(selected)]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ—Ö–æ–∂–∏–π —ç–ª–µ–º–µ–Ω—Ç
            all_elements_w_emoji = list(map(lambda x: emoji.replace_emoji(x, ""), list(all_elements)))
            if emoji.replace_emoji(reaction_result, "") in list(map(lambda x: emoji.replace_emoji(x, ""), all_elements)):
                reaction_result = list(all_elements)[all_elements_w_emoji.index(emoji.replace_emoji(reaction_result, ""))]

            all_elements.add(reaction_result)
            generated_reactions[tuple(selected)] = reaction_result
            print("–ò—Ç–æ–≥: " + reaction_result)
            selected.clear()
            inp = ""
            continue

    inp = input(">").strip()
